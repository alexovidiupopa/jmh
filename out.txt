"C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -jar D:\code\jmh\target\jmh-1.0-SNAPSHOT.jar SortingBenchmark
# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkBubbleSort
# Parameters: (arraySize = 1000)

# Run progress: 0.00% complete, ETA 00:01:07
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0.350 ms/op
# Warmup Iteration   2: 0.338 ms/op
Iteration   1: 0.339 ms/op
Iteration   2: 0.326 ms/op
Iteration   3: 0.308 ms/op

# Run progress: 3.70% complete, ETA 00:01:11
# Fork: 1 of 2
# Warmup Iteration   1: 0.347 ms/op
# Warmup Iteration   2: 0.343 ms/op
Iteration   1: 0.342 ms/op
Iteration   2: 0.329 ms/op
Iteration   3: 0.307 ms/op

# Run progress: 7.41% complete, ETA 00:01:08
# Fork: 2 of 2
# Warmup Iteration   1: 0.323 ms/op
# Warmup Iteration   2: 0.320 ms/op
Iteration   1: 0.321 ms/op
Iteration   2: 0.315 ms/op
Iteration   3: 0.312 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkBubbleSort":
  0.321 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.307, 0.321, 0.342), stdev = 0.013
  CI (99.9%): [0.285, 0.357] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkBubbleSort
# Parameters: (arraySize = 10000)

# Run progress: 11.11% complete, ETA 00:01:05
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 27.981 ms/op
# Warmup Iteration   2: 22.716 ms/op
Iteration   1: 22.686 ms/op
Iteration   2: 22.745 ms/op
Iteration   3: 22.731 ms/op

# Run progress: 14.81% complete, ETA 00:01:03
# Fork: 1 of 2
# Warmup Iteration   1: 27.548 ms/op
# Warmup Iteration   2: 22.436 ms/op
Iteration   1: 22.507 ms/op
Iteration   2: 22.629 ms/op
Iteration   3: 22.467 ms/op

# Run progress: 18.52% complete, ETA 00:01:00
# Fork: 2 of 2
# Warmup Iteration   1: 27.666 ms/op
# Warmup Iteration   2: 22.778 ms/op
Iteration   1: 22.740 ms/op
Iteration   2: 22.545 ms/op
Iteration   3: 22.685 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkBubbleSort":
  22.595 ±(99.9%) 0.299 ms/op [Average]
  (min, avg, max) = (22.467, 22.595, 22.740), stdev = 0.107
  CI (99.9%): [22.296, 22.895] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkBubbleSort
# Parameters: (arraySize = 100000)

# Run progress: 22.22% complete, ETA 00:00:58
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 5405.231 ms/op
# Warmup Iteration   2: 5395.803 ms/op
Iteration   1: 6898.579 ms/op
Iteration   2: 6815.037 ms/op
Iteration   3: 6821.863 ms/op

# Run progress: 25.93% complete, ETA 00:02:17
# Fork: 1 of 2
# Warmup Iteration   1: 4485.321 ms/op
# Warmup Iteration   2: 4538.037 ms/op
Iteration   1: 6960.188 ms/op
Iteration   2: 6893.375 ms/op
Iteration   3: 6888.339 ms/op

# Run progress: 29.63% complete, ETA 00:03:05
# Fork: 2 of 2
# Warmup Iteration   1: 4695.380 ms/op
# Warmup Iteration   2: 5471.617 ms/op
Iteration   1: 6890.396 ms/op
Iteration   2: 6890.946 ms/op
Iteration   3: 6889.269 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkBubbleSort":
  6902.085 ±(99.9%) 79.964 ms/op [Average]
  (min, avg, max) = (6888.339, 6902.085, 6960.188), stdev = 28.516
  CI (99.9%): [6822.122, 6982.049] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkConcurrentSort
# Parameters: (arraySize = 1000)

# Run progress: 33.33% complete, ETA 00:03:38
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0.010 ±(99.9%) 0.001 ms/op
# Warmup Iteration   2: 0.009 ±(99.9%) 0.002 ms/op
Iteration   1: 0.009 ±(99.9%) 0.001 ms/op
Iteration   2: 0.009 ±(99.9%) 0.001 ms/op
Iteration   3: 0.009 ±(99.9%) 0.001 ms/op

# Run progress: 37.04% complete, ETA 00:03:10
# Fork: 1 of 2
# Warmup Iteration   1: 0.011 ±(99.9%) 0.002 ms/op
# Warmup Iteration   2: 0.010 ±(99.9%) 0.001 ms/op
Iteration   1: 0.010 ±(99.9%) 0.001 ms/op
Iteration   2: 0.010 ±(99.9%) 0.001 ms/op
Iteration   3: 0.010 ±(99.9%) 0.001 ms/op

# Run progress: 40.74% complete, ETA 00:02:46
# Fork: 2 of 2
# Warmup Iteration   1: 0.011 ±(99.9%) 0.001 ms/op
# Warmup Iteration   2: 0.009 ±(99.9%) 0.001 ms/op
Iteration   1: 0.009 ±(99.9%) 0.001 ms/op
Iteration   2: 0.009 ±(99.9%) 0.001 ms/op
Iteration   3: 0.009 ±(99.9%) 0.001 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkConcurrentSort":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.009, 0.010] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkConcurrentSort
# Parameters: (arraySize = 10000)

# Run progress: 44.44% complete, ETA 00:02:26
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0.188 ±(99.9%) 0.011 ms/op
# Warmup Iteration   2: 0.161 ±(99.9%) 0.002 ms/op
Iteration   1: 0.159 ±(99.9%) 0.003 ms/op
Iteration   2: 0.160 ±(99.9%) 0.003 ms/op
Iteration   3: 0.159 ±(99.9%) 0.002 ms/op

# Run progress: 48.15% complete, ETA 00:02:09
# Fork: 1 of 2
# Warmup Iteration   1: 0.202 ±(99.9%) 0.012 ms/op
# Warmup Iteration   2: 0.165 ±(99.9%) 0.002 ms/op
Iteration   1: 0.166 ±(99.9%) 0.003 ms/op
Iteration   2: 0.166 ±(99.9%) 0.001 ms/op
Iteration   3: 0.165 ±(99.9%) 0.001 ms/op

# Run progress: 51.85% complete, ETA 00:01:54
# Fork: 2 of 2
# Warmup Iteration   1: 0.192 ±(99.9%) 0.011 ms/op
# Warmup Iteration   2: 0.170 ±(99.9%) 0.002 ms/op
Iteration   1: 0.171 ±(99.9%) 0.002 ms/op
Iteration   2: 0.170 ±(99.9%) 0.002 ms/op
Iteration   3: 0.170 ±(99.9%) 0.002 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkConcurrentSort":
  0.168 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.165, 0.168, 0.171), stdev = 0.003
  CI (99.9%): [0.160, 0.175] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkConcurrentSort
# Parameters: (arraySize = 100000)

# Run progress: 55.56% complete, ETA 00:01:40
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 1.742 ±(99.9%) 0.778 ms/op
# Warmup Iteration   2: 1.360 ±(99.9%) 0.058 ms/op
Iteration   1: 1.357 ±(99.9%) 0.055 ms/op
Iteration   2: 1.353 ±(99.9%) 0.118 ms/op
Iteration   3: 1.348 ±(99.9%) 0.094 ms/op

# Run progress: 59.26% complete, ETA 00:01:28
# Fork: 1 of 2
# Warmup Iteration   1: 3.194 ±(99.9%) 1.630 ms/op
# Warmup Iteration   2: 1.362 ±(99.9%) 0.074 ms/op
Iteration   1: 1.359 ±(99.9%) 0.030 ms/op
Iteration   2: 1.366 ±(99.9%) 0.081 ms/op
Iteration   3: 1.392 ±(99.9%) 0.031 ms/op

# Run progress: 62.96% complete, ETA 00:01:17
# Fork: 2 of 2
# Warmup Iteration   1: 1.692 ±(99.9%) 0.729 ms/op
# Warmup Iteration   2: 1.316 ±(99.9%) 0.083 ms/op
Iteration   1: 1.307 ±(99.9%) 0.049 ms/op
Iteration   2: 1.304 ±(99.9%) 0.135 ms/op
Iteration   3: 1.297 ±(99.9%) 0.084 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkConcurrentSort":
  1.337 ±(99.9%) 0.112 ms/op [Average]
  (min, avg, max) = (1.297, 1.337, 1.392), stdev = 0.040
  CI (99.9%): [1.225, 1.450] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkStandardSort
# Parameters: (arraySize = 1000)

# Run progress: 66.67% complete, ETA 00:01:06
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op

# Run progress: 70.37% complete, ETA 00:00:57
# Fork: 1 of 2
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op

# Run progress: 74.07% complete, ETA 00:00:48
# Fork: 2 of 2
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkStandardSort":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.009, 0.010] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkStandardSort
# Parameters: (arraySize = 10000)

# Run progress: 77.78% complete, ETA 00:00:40
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0.284 ms/op
# Warmup Iteration   2: 0.273 ms/op
Iteration   1: 0.276 ms/op
Iteration   2: 0.271 ms/op
Iteration   3: 0.271 ms/op

# Run progress: 81.48% complete, ETA 00:00:32
# Fork: 1 of 2
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.266 ms/op
Iteration   1: 0.268 ms/op
Iteration   2: 0.268 ms/op
Iteration   3: 0.267 ms/op

# Run progress: 85.19% complete, ETA 00:00:25
# Fork: 2 of 2
# Warmup Iteration   1: 0.272 ms/op
# Warmup Iteration   2: 0.256 ms/op
Iteration   1: 0.256 ms/op
Iteration   2: 0.256 ms/op
Iteration   3: 0.254 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkStandardSort":
  0.261 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.254, 0.261, 0.268), stdev = 0.007
  CI (99.9%): [0.242, 0.281] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.2, OpenJDK 64-Bit Server VM, 21.0.2+13-LTS
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-21.0.2.13-hotspot\bin\java.exe
# VM options: -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 500 ms each
# Measurement: 3 iterations, 500 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.alexovidiupopa.jmh.SortingBenchmark.benchmarkStandardSort
# Parameters: (arraySize = 100000)

# Run progress: 88.89% complete, ETA 00:00:18
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 4.356 ms/op
# Warmup Iteration   2: 3.772 ms/op
Iteration   1: 3.823 ms/op
Iteration   2: 3.825 ms/op
Iteration   3: 3.822 ms/op

# Run progress: 92.59% complete, ETA 00:00:12
# Fork: 1 of 2
# Warmup Iteration   1: 4.329 ms/op
# Warmup Iteration   2: 3.661 ms/op
Iteration   1: 3.711 ms/op
Iteration   2: 3.702 ms/op
Iteration   3: 3.701 ms/op

# Run progress: 96.30% complete, ETA 00:00:05
# Fork: 2 of 2
# Warmup Iteration   1: 4.096 ms/op
# Warmup Iteration   2: 3.684 ms/op
Iteration   1: 3.721 ms/op
Iteration   2: 3.723 ms/op
Iteration   3: 3.727 ms/op


Result "com.alexovidiupopa.jmh.SortingBenchmark.benchmarkStandardSort":
  3.714 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (3.701, 3.714, 3.727), stdev = 0.011
  CI (99.9%): [3.683, 3.745] (assumes normal distribution)


# Run complete. Total time: 00:02:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                 (arraySize)  Mode  Cnt     Score    Error  Units
SortingBenchmark.benchmarkBubbleSort             1000  avgt    6     0.321 ±  0.036  ms/op
SortingBenchmark.benchmarkBubbleSort            10000  avgt    6    22.595 ±  0.299  ms/op
SortingBenchmark.benchmarkBubbleSort           100000  avgt    6  6902.085 ± 79.964  ms/op
SortingBenchmark.benchmarkConcurrentSort         1000  avgt    6     0.009 ±  0.001  ms/op
SortingBenchmark.benchmarkConcurrentSort        10000  avgt    6     0.168 ±  0.007  ms/op
SortingBenchmark.benchmarkConcurrentSort       100000  avgt    6     1.337 ±  0.112  ms/op
SortingBenchmark.benchmarkStandardSort           1000  avgt    6     0.009 ±  0.001  ms/op
SortingBenchmark.benchmarkStandardSort          10000  avgt    6     0.261 ±  0.019  ms/op
SortingBenchmark.benchmarkStandardSort         100000  avgt    6     3.714 ±  0.031  ms/op

Process finished with exit code 0
